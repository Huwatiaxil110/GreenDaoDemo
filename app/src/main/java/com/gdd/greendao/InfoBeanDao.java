package com.gdd.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INFO_BEAN".
*/
public class InfoBeanDao extends AbstractDao<InfoBean, Long> {

    public static final String TABLENAME = "INFO_BEAN";

    /**
     * Properties of entity InfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Tabid = new Property(0, Long.class, "tabid", true, "_id");
        public final static Property ClassTypeId = new Property(1, Integer.class, "classTypeId", false, "CLASS_TYPE_ID");
        public final static Property ClassTypeCode = new Property(2, String.class, "classTypeCode", false, "CLASS_TYPE_CODE");
        public final static Property ClassTypeName = new Property(3, String.class, "classTypeName", false, "CLASS_TYPE_NAME");
        public final static Property Period = new Property(4, Integer.class, "period", false, "PERIOD");
        public final static Property GradeId = new Property(5, Integer.class, "gradeId", false, "GRADE_ID");
        public final static Property SubjectId = new Property(6, Integer.class, "subjectId", false, "SUBJECT_ID");
        public final static Property SubjectProductId = new Property(7, Integer.class, "subjectProductId", false, "SUBJECT_PRODUCT_ID");
    }


    public InfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public InfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: tabid
                "\"CLASS_TYPE_ID\" INTEGER," + // 1: classTypeId
                "\"CLASS_TYPE_CODE\" TEXT," + // 2: classTypeCode
                "\"CLASS_TYPE_NAME\" TEXT," + // 3: classTypeName
                "\"PERIOD\" INTEGER," + // 4: period
                "\"GRADE_ID\" INTEGER," + // 5: gradeId
                "\"SUBJECT_ID\" INTEGER," + // 6: subjectId
                "\"SUBJECT_PRODUCT_ID\" INTEGER);"); // 7: subjectProductId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InfoBean entity) {
        stmt.clearBindings();
 
        Long tabid = entity.getTabid();
        if (tabid != null) {
            stmt.bindLong(1, tabid);
        }
 
        Integer classTypeId = entity.getClassTypeId();
        if (classTypeId != null) {
            stmt.bindLong(2, classTypeId);
        }
 
        String classTypeCode = entity.getClassTypeCode();
        if (classTypeCode != null) {
            stmt.bindString(3, classTypeCode);
        }
 
        String classTypeName = entity.getClassTypeName();
        if (classTypeName != null) {
            stmt.bindString(4, classTypeName);
        }
 
        Integer period = entity.getPeriod();
        if (period != null) {
            stmt.bindLong(5, period);
        }
 
        Integer gradeId = entity.getGradeId();
        if (gradeId != null) {
            stmt.bindLong(6, gradeId);
        }
 
        Integer subjectId = entity.getSubjectId();
        if (subjectId != null) {
            stmt.bindLong(7, subjectId);
        }
 
        Integer subjectProductId = entity.getSubjectProductId();
        if (subjectProductId != null) {
            stmt.bindLong(8, subjectProductId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InfoBean entity) {
        stmt.clearBindings();
 
        Long tabid = entity.getTabid();
        if (tabid != null) {
            stmt.bindLong(1, tabid);
        }
 
        Integer classTypeId = entity.getClassTypeId();
        if (classTypeId != null) {
            stmt.bindLong(2, classTypeId);
        }
 
        String classTypeCode = entity.getClassTypeCode();
        if (classTypeCode != null) {
            stmt.bindString(3, classTypeCode);
        }
 
        String classTypeName = entity.getClassTypeName();
        if (classTypeName != null) {
            stmt.bindString(4, classTypeName);
        }
 
        Integer period = entity.getPeriod();
        if (period != null) {
            stmt.bindLong(5, period);
        }
 
        Integer gradeId = entity.getGradeId();
        if (gradeId != null) {
            stmt.bindLong(6, gradeId);
        }
 
        Integer subjectId = entity.getSubjectId();
        if (subjectId != null) {
            stmt.bindLong(7, subjectId);
        }
 
        Integer subjectProductId = entity.getSubjectProductId();
        if (subjectProductId != null) {
            stmt.bindLong(8, subjectProductId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InfoBean readEntity(Cursor cursor, int offset) {
        InfoBean entity = new InfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // tabid
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // classTypeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // classTypeCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // classTypeName
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // period
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // gradeId
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // subjectId
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // subjectProductId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InfoBean entity, int offset) {
        entity.setTabid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClassTypeId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setClassTypeCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClassTypeName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPeriod(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setGradeId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSubjectId(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setSubjectProductId(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InfoBean entity, long rowId) {
        entity.setTabid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InfoBean entity) {
        if(entity != null) {
            return entity.getTabid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InfoBean entity) {
        return entity.getTabid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
